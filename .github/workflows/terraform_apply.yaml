name: teraform_apply

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform version to use'
        required: true
        default: '1.13'
      working_directory:
        description: 'Directory containing Terraform configuration files'
        required: true
        default: '.'
      terraform_plan_file:
        description: 'Terraform plan output from a successfull plan'
        required: true

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Determine Provider
      id: determine_provider
      uses: ./.github/workflows/_determine_provider.yaml

    - name: Authenticate Azure
      if: steps.determine_provider.outputs.azure == 'true'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        enable-AzPsession: true

    - name: Terraform Init Azure
      if: steps.determine_provider.outputs.azure == 'true'
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_USE_OIDC: true
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        terraform init \
        -backend-config="storage_account_name=${{ secrets.TF_AZ_STATE_STORE }}" \
        -backend-config="container_name=${{ secrets.TF_AZ_STATE_CONTAINER }}" \
        -backend-config="key=terraform.tfstate" \

#    - name: Terraform Init AWS
#      if: steps.determine_provider.outputs.aws == 'true'
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      run: |
#        terraform init \
#        -backend-config="bucket=${{ secrets.TF_AWS_STATE_BUCKET }}" \
#        -backend-config="key=terraform.tfstate" \
#        -backend-config="region=${{ secrets.TF_AWS_STATE_REGION }}" \
#        -backend-config="access_key=${{ secrets.TF_AWS_ACCESS_KEY }}" \
#

    - name: Authenticate GCP
      if: steps.determine_provider.outputs.gcp == 'true'
      uses: google-github-actions/auth@v2.1.12
      with:
        workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
        create_credentials_file: true
        token_format: "access_token"

    - name: Terraform Init GCP
      if: steps.determine_provider.outputs.gcp == 'true'
      run: |
        terraform init \
        -backend-config="bucket=${{ secrets.GOOGLE_STATE_BUCKET }}" 

    - name: Terraform Apply
      if: github.event.pull_request.merged && github.base_ref == 'main'
      run: |
        terraform apply ${{ inputs.terraform_plan_file }} -auto-approve -input=false
