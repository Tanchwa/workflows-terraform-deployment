name: terraform_plan

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform version to use'
        required: true
        default: '1.12'
        type: string
      working_directory:
        description: 'Directory containing Terraform configuration files'
        required: true
        default: '.'
        type: string
      post_pr_comment:
        description: 'Whether to post the plan output as a comment on the PR'
        required: false
        default: false
        type: boolean
    secrets:
      ARM_CLIENT_ID:
        required: false
      ARM_TENANT_ID:
        required: false
      ARM_SUBSCRIPTION_ID:
        required: false
      AZ_STATE_STORE:
        required: false
      AZ_STATE_CONTAINER:
        required: false
      AWS_IAM_ROLE_ARN:
        required: false
      AWS_STATE_BUCKET:
        required: false
      AWS_STATE_REGION:
        required: false
      GOOGLE_WORKLOAD_IDENTITY_PROVIDER:
        required: false
      GOOGLE_SERVICE_ACCOUNT_EMAIL:
        required: false
      GOOGLE_STATE_BUCKET:
        required: false

jobs:
  determine_provider:
    uses: ./.github/workflows/_determine_provider.yaml
    secrets: 
      AWS_IAM_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
      GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: 
      - determine_provider
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    outputs:
      plan_file: ${{ steps.plan.outputs.plan_file }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.2
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Authenticate Azure
      if: needs.determine_provider.outputs.azure == 'true'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        enable-AzPsession: true

    - name: Terraform Init Azure
      if: needs.determine_provider.outputs.azure == 'true'
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_USE_OIDC: true
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        terraform init \
        -backend-config="storage_account_name=${{ secrets.AZ_STATE_STORE }}" \
        -backend-config="container_name=${{ secrets.AZ_STATE_CONTAINER }}" \
        -backend-config="key=terraform.tfstate" \


    - name: Authenticate AWS
      if: needs.determine_provider.outputs.aws == 'true'
      uses: aws-actions/configure-aws-credentials@v2.0.0
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_STATE_REGION }}
        role-session-name: 'GitHubActionsSession'


    - name: Terraform Init AWS
      if: needs.determine_provider.outputs.aws == 'true'
      run: |
        terraform init \
        -backend-config="bucket=${{ secrets.AWS_STATE_BUCKET }}" \
        -backend-config="key=terraform.tfstate" \
        -backend-config="region=${{ secrets.AWS_STATE_REGION }}" \


    - name: Authenticate GCP
      if: needs.determine_provider.outputs.gcp == 'true'
      uses: google-github-actions/auth@v2.1.12
      with:
        workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
        create_credentials_file: true
        token_format: "access_token"

    - name: Terraform Init GCP
      if: needs.determine_provider.outputs.gcp == 'true'
      run: |
        terraform init \
        -backend-config="bucket=${{ secrets.GOOGLE_STATE_BUCKET }}" \
        -backend-config="prefix=terraform/state" 


    ## we run the same plan command for all providers to get the plan output
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -input=false -out=tfplan && \
        echo "Terraform plan created successfully." && \
        terraform show -no-color tfplan > plan.txt && \
        echo "plan_file=$(cat plan.txt)" >> $GITHUB_OUTPUT

    - name: Publish Plan as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: tfplan

    - name: Publish Plan as PR Comment
      uses: mshick/add-pr-comment@v2
      if: ${{ inputs.post_pr_comment }}
      with:
        message: |
          ## Terraform Plan
          ### Terraform Plan Output
          ```plaintext
          ${{ steps.plan.outputs.plan_file }}
          ```
